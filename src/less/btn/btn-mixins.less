@import (reference) 'btn-variables';
@import (reference) '../common/mixins';
@import (reference) '../common/utils';

// Create button sizes
// - Button sizes: btn-md, btn-sm, btn-lg
// @size: md, sm, lg
.btn-size-mixin(@size) {
  @height: "btn-@{size}-height";
  @font-size: "btn-@{size}-font-size";
  @icon-font-size: "btn-@{size}-icon-font-size";
  @icon-spacing: "btn-@{size}-icon-spacing";
  @padding: "btn-@{size}-padding";

  font-size: @@font-size;
  line-height: @@height;
  height: @@height;
  min-width: @@height;

  .icon-inside-btn-mixin({
    font-size: @@icon-font-size;
  });

  // icon-only button has no padding or space after the icon
  .btn-not-btn-icon-mixin({
    padding: 0 @@padding;

    .icon-inside-btn-mixin({
      margin-right: @@icon-spacing;
    });
  });
}

// Create button spacing variations based on the list size
// - List sizes: btn-list-md, btn-list-sm, btn-list-lg)
// @size: md, sm, lg
.btn-list-size-mixin(@size) {
  @spacing: "btn-list-@{size}-spacing";

  & > .btn:not(:last-child),
  .btn-state-label:not(:last-child) .btn {
    margin-right: @@spacing;
  }
}

// Create button spacing variations based on the vertical list size
// - List sizes: btn-v-list-md, btn-v-list-sm, btn-v-list-lg
// @size: md, sm, lg
.btn-v-list-size-mixin(@size) {
  @spacing: "btn-v-list-@{size}-spacing";

  & > .btn:not(:last-child),
  .btn-state-label:not(:last-child) .btn {
    margin-bottom: @@spacing;
  }
}

// Create button focus border using drop shadow
// @color: focus border color
.btn-focus-border-mixin(@color) {
  .inner-border-mixin(@btn-highlight-width; @color);
}

// Create button theme
// - dark themes look better on darker backgrounds
// @theme: default, accent, candy, default-dark, accent-dark, candy-dark
.btn-theme-mixin(@theme) {
  @normal-background-color: "btn-@{theme}-normal-background-color";
  @hover-background-color: "btn-@{theme}-hover-background-color";
  @active-background-color: "btn-@{theme}-active-background-color";
  @normal-text-color: "btn-@{theme}-normal-text-color";
  @hover-text-color: "btn-@{theme}-hover-text-color";
  @active-text-color: "btn-@{theme}-active-text-color";
  @normal-highlight-color: "btn-@{theme}-normal-highlight-color";
  @active-highlight-color: "btn-@{theme}-active-highlight-color";

  .btn-normal-state-mixin({
    background-color: @@normal-background-color;
    color: @@normal-text-color;
    .btn-focus-border-mixin(transparent);
  });

  .btn-focus-state-mixin({
    .btn-focus-border-mixin(@@normal-highlight-color);
  });

  .btn-hover-state-mixin({
    text-decoration: none;
    background-color: @@hover-background-color;
    color: @@hover-text-color;
    .btn-focus-border-mixin(transparent);
  });

  .btn-active-state-mixin({
    background-color: @@active-background-color;
    color: @@active-text-color;
    .btn-focus-border-mixin(transparent);
  });

  .btn-active-focus-state-mixin({
    .btn-focus-border-mixin(@@active-highlight-color);
  });

  .btn-disabled-state-mixin({
    background-color: @@normal-background-color;
    color: @@normal-text-color;
    .btn-focus-border-mixin(transparent);
  });

  .btn-active-disabled-state-mixin({
    background-color: @@active-background-color;
    color: @@active-text-color;
    .btn-focus-border-mixin(transparent);
  });
}

// Rules for normal button state
.btn-normal-state-mixin(@rules) {
  @rules();
}

// Rules for button focus state
.btn-focus-state-mixin(@rules) {
  &:focus,
  .btn-state:focus + & {
    &:not(:hover):not(:active):not(.disabled) {
      @rules();
    }
  }
}

// Rules for button hover state
.btn-hover-state-mixin(@rules) {
  &:hover {
    @rules();
  }
}

// Rules for button active state
.btn-active-state-mixin(@rules) {
  &:active,
  &.active,
  .btn-state:checked + & {
    @rules();
  }
}

// Rules for button active focus state
.btn-active-focus-state-mixin(@rules) {
  &.active:focus,
  .btn-state:checked:focus + & {
    &:not(:hover):not(:active) {
      @rules();
    }
  }
}

// Rules for button disabled state
.btn-disabled-state-mixin(@rules) {
  &.disabled.disabled,
  &:disabled:disabled,
  .btn-state:disabled:disabled + & {
    @rules();
  }
}

// Rules for button active disabled state
.btn-active-disabled-state-mixin(@rules) {
  &.active.disabled.disabled,
  &.active:disabled:disabled,
  .btn-state:checked:disabled:disabled + & {
    @rules();
  }
}

// Rules for buttons that are not icon button
.btn-not-btn-icon-mixin(@rules) {
  &:not(.btn-icon) {
    @rules();
  }
}

// Rules for the icon inside button
.icon-inside-btn-mixin(@rules) {
  [class*=icon] {
    @rules();
  }
}
